const { readdir, readFileSync, writeFileSync } = require("fs");
const path = require("path");

const directory = "assets/icons";
const componentDirectory = "components/svg-icon";

const toPascalCase = (string) =>
  string
    .match(/[a-z|0-9]+/gi)
    .map((word) => word.charAt(0).toUpperCase() + word.substr(1).toLowerCase())
    .join("");

const indexImports = [];
const indexMapEntries = [];
const enumEntries = [];

readdir(directory, (error, files) => {
  if (error) {
    console.error("Error reading directory:", error);
    return;
  }

  files
    .filter((f) => !f.includes("index") && !f.includes(".ts"))
    .forEach((fileName) => {
      if (fileName.match(/^[A-Z0-9]/i)) {
        const filePath = path.join(directory, fileName);
        let fileContent = readFileSync(filePath, "utf8");

        // Replace fill and stroke attributes with "none"
        fileContent = fileContent.replace(/fill="[^"]*"/g, 'fill="none"');
        fileContent = fileContent.replace(/stroke="[^"]*"/g, 'stroke="none"');
        fileContent = fileContent.replace(/color="[^"]*"/g, 'color="none"');

        // Write the modified content back to the file
        writeFileSync(filePath, fileContent, "utf8");

        const fileNameNoExtension = fileName.split(".")[0];
        const pascalFileName = toPascalCase(fileNameNoExtension);

        indexImports.push(`import ${pascalFileName} from './${fileName}';`);
        indexMapEntries.push(
          `    ${pascalFileName.charAt(0).toLowerCase() + pascalFileName.slice(1)}: ${pascalFileName},`
        );
        enumEntries.push(
          `    ${pascalFileName.charAt(0).toLowerCase() + pascalFileName.slice(1)} = '${
            pascalFileName.charAt(0).toLowerCase() + pascalFileName.slice(1)
          }',`
        );
      }
    });

  // generate index for icons
  const indexLines = [
    "// Do not alter this file, instead it should be generated by using `yarn svg`",
    "// This will override this file and update the exported map for use in the SvgIcon component\n",
    `import { FC } from 'react';`,
    ...indexImports,
  ];
  indexLines.push("\nexport const TLAIcons: { [key: string]: FC<any> } = {");
  indexLines.push(...indexMapEntries);
  indexLines.push("}");

  writeFileSync(`${directory}/index.ts`, indexLines.join("\n"));

  // generate enum for SvgComponent
  const enumLines = [
    "// Do not alter this file, instead it should be generated by using `yarn svg`",
    "// This will override this file and update the exported enum for use in the SvgIcon component\n",
    "export enum TLASvg {",
    ...enumEntries,
    "}",
  ];

  writeFileSync(`${componentDirectory}/svg.enum.ts`, enumLines.join("\n"));
});
